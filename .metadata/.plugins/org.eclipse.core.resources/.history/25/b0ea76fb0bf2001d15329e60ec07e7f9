package DP2;


public class minCostPath {
	
	public static int mincost(int arr[][]) {
		return mincosthelper(arr, 0,0);
	}
	
	// min cost path from (i,j) to cell (m-1, n-1)

	private static int mincosthelper(int[][] arr, int i, int j) {
		int m= arr.length;
		int n =arr[0].length;
		if (i==m-1 && j== n-1) {
			return arr[i][j];
		}
		if (i>=m || j>=n) {
			return Integer.MAX_VALUE;
		}
			
		int op1= mincosthelper(arr, i, j + 1);
		int op2= mincosthelper(arr, i+1, j + 1);
		int op3= mincosthelper(arr, i+1, j );
		return Math.min(op1, Math.min(op2, op3)) + arr[i][j];
	}

	public static void main(String[] args) {
		int arr[][]= {{1,1,1},
					{4,0,0},
					{7,8,9}};
		System.out.println(mincost(arr));
		}

	}


