package DP2;


public class minCostPath {
	
	public static int mincost(int arr[][]) {
		return mincosthelper(arr, 0,0);
	}
	
	// min cost path from (i,j) to cell (m-1, n-1)

	private static int mincosthelper(int[][] arr, int i, int j) {
		int m= arr.length;
		int n =arr[0].length;
		if (i==m-1 && j== n-1) {
			return arr[i][j];
		}
		if (i>=m || j>=n) {
			return Integer.MAX_VALUE;
		}
			
		int op1= mincosthelper(arr, i, j + 1);
		int op2= mincosthelper(arr, i+1, j + 1);
		int op3= mincosthelper(arr, i+1, j );
		return Math.min(op1, Math.min(op2, op3)) + arr[i][j];
	}
	
	public static int mincostMemoisation(int arr[][]) {
		int m= arr.length;
		int n =arr[0].length;
		int storage[][]= new int [m][n];
		for (int i=0; i<m; i++) {
			for (int j=0; j<n; j++) {
				storage[i][j]= -1;
			}
		}
		return mincostMhelper(arr,0,0,storage);
		
	}

	private static int mincostMhelper(int[][] arr, int i, int j, int[][] storage) {
		// Base Case
		int m= arr.length;
		int n =arr[0].length;
		
		if (i>=m || j>=n) {
			return Integer.MAX_VALUE;
		}
		
		if (i==m-1 && j== n-1) {
			storage[m-1][n-1]=arr[i][j];
			return storage[i][j];
		}
		if (storage[i][j]!=0) {
			return storage[i][j];
		}
		
		int op1= mincostMhelper(arr, i, j + 1,storage);
		int op2= mincostMhelper(arr, i+1, j + 1,storage);
		int op3= mincostMhelper(arr, i+1, j,storage );
		storage[i][j]= Math.min(op1, Math.min(op2, op3)) + arr[i][j];
		
		return storage[i][j];
		
	}

	public static void main(String[] args) {
		int arr[][]= {{1,1,1},
					{4,0,0},
					{7,8,9}};
		System.out.println(mincostMemoisation(arr));
		}

	}


