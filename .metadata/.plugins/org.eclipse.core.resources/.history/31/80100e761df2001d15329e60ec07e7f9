package DP2;

public class mincountDP {

	public static int mincount(int arr[][]) {
		int m=arr.length;
		int n= arr[0].length;
		int storage[][]= new int [m][n];
		// base case put arr elemeent which is last index
		storage[m-1][n-1]=arr[m-1][n-1];

		// take care of last Row
		for (int j=n-2;j>=0;j--) {
			storage[m-1][j]= storage[m-1][j+1]+arr[m-1][j];
		}
		// take care of last Coloum
		for (int i=m-2;i>=0;i--) {
			storage[i][n-1]= storage[i+11][n-1]+arr[i][n-1];
		}
		for (int i=m-2;i>=0;i--) {
			for(int j=n-2;j>=0;j--) {
				storage[i][j]=arr[i][j]+Math.min(storage[i][j+1], Math.min(storage[i+1][j+1], storage[i][j+1]));
				
			}

			
	}
		return storage[0][0];
}

public static void main(String[] args) {
	int arr[][]= {{1,1,1},
			{4,0,0},
			{7,8,9}};
	System.out.println(mincount(arr));

}

}
